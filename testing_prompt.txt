You are an excellent task planner whose task is to help 2 robots to complete the final task of "Turn on Sink faucet and put toilet paper in the trash" in Bathroom. 
In current stage, the robots in the environment had execute a existing plan. 
However, it seems like the task is not yet completed. And your task is to based on previous plan and the information of last executed state to re-generated a new plan for the two robot agents to complete the final task.
 
you will be given the following information:

```previous plan``` which is a python file, within this file, there is a section start with ### Code Plan Start and end with ### Code Plan End, this the section that how robot should take actions.

And, you will also have following information which is the last executed state```env_state```, this is a json file that contains the following :  ```agent_info``` which is the information of the 2 robot agents, ```object_info``` which is the objects list that are available in the environment, ```reachable_positions``` which is the the position that an agent can reach within the environment, ```obj_changed``` which is the the object that ```agent[i]``` was interacting.

And you will also have ```ai2thor_actions``` which is the list of actions that an agent can perform. 
you will have the information of what task needs to be done, what objects are available in the scene (including the position of the objects)

 ### INPUT INFORMATION
 - previous plan:

import math
import re
import shutil
import subprocess
import time
import threading
import cv2
import numpy as np
from ai2thor.controller import Controller
from scipy.spatial import distance
from typing import Tuple
from collections import deque
import random
import os
from glob import glob
import json

random.seed(55)


def closest_node(node, nodes, no_robot, clost_node_location):
    crps = []
    distances = distance.cdist([node], nodes)[0]
    dist_indices = np.argsort(np.array(distances))
    for i in range(no_robot):
        pos_index = dist_indices[(i * 5) + clost_node_location[i]]
        crps.append (nodes[pos_index])
    return crps

def distance_pts(p1: Tuple[float, float, float], p2: Tuple[float, float, float]):
    return ((p1[0] - p2[0]) ** 2 + (p1[2] - p2[2]) ** 2) ** 0.5

def generate_video():
    frame_rate = 5
    # input_path, prefix, char_id=0, image_synthesis=['normal'], frame_rate=5
    cur_path = os.path.dirname(__file__) + "/*/"
    for imgs_folder in glob(cur_path, recursive = False):
        view = imgs_folder.split('/')[-2]
        if not os.path.isdir(imgs_folder):
            print("The input path: {} you specified does not exist.".format(imgs_folder))
        else:
            command_set = ['ffmpeg', '-i',
                                '{}/img_%05d.png'.format(imgs_folder), 
                                '-framerate', str(frame_rate),
                                '-pix_fmt', 'yuv420p',
                                '{}/video_{}.mp4'.format(os.path.dirname(__file__), view)]
            subprocess.call(command_set)
        

robots = [{'name': 'robot1', 'skills': ['GoToObject', 'OpenObject', 'CloseObject', 'BreakObject', 'SliceObject', 'SwitchOn', 'SwitchOff', 'PickupObject', 'PutObject', 'DropHandObject', 'ThrowObject', 'PushObject', 'PullObject'], 'mass': 100}, {'name': 'robot2', 'skills': ['GoToObject', 'OpenObject', 'CloseObject', 'BreakObject', 'SliceObject', 'SwitchOn', 'SwitchOff', 'PickupObject', 'PutObject', 'DropHandObject', 'ThrowObject', 'PushObject', 'PullObject'], 'mass': 100}]

floor_no = 414


ground_truth = [{'name': 'Faucet', 'contains': [], 'state': 'ON'}, {'name': 'GarbageCan ', 'contains': ['ToiletPaper'], 'state': 'None'}]
no_trans_gt = 0
max_trans = 0


total_exec = 0
success_exec = 0

c = Controller( height=1000, width=1000)
c.reset("FloorPlan" + str(floor_no)) 
no_robot = len(robots)

# initialize n agents into the scene
multi_agent_event = c.step(dict(action='Initialize', agentMode="default", snapGrid=False, gridSize=0.5, rotateStepDegrees=20, visibilityDistance=100, fieldOfView=90, agentCount=no_robot))

# add a top view camera
event = c.step(action="GetMapViewCameraProperties")
event = c.step(action="AddThirdPartyCamera", **event.metadata["actionReturn"])

# get reachabel positions
reachable_positions_ = c.step(action="GetReachablePositions").metadata["actionReturn"]
reachable_positions = positions_tuple = [(p["x"], p["y"], p["z"]) for p in reachable_positions_]

# randomize postions of the agents
for i in range (no_robot):
    init_pos = random.choice(reachable_positions_)
    c.step(dict(action="Teleport", position=init_pos, agentId=i))
    
objs = list([obj["objectId"] for obj in c.last_event.metadata["objects"]])
# print (objs)
    
# x = c.step(dict(action="RemoveFromScene", objectId='Lettuce|+01.11|+00.83|-01.43'))
#c.step({"action":"InitialRandomSpawn", "excludedReceptacles":["Microwave", "Pan", "Chair", "Plate", "Fridge", "Cabinet", "Drawer", "GarbageCan"]})
# c.step({"action":"InitialRandomSpawn", "excludedReceptacles":["Cabinet", "Drawer", "GarbageCan"]})

action_queue = []

task_over = False

recp_id = None

for i in range (no_robot):
    multi_agent_event = c.step(action="LookDown", degrees=35, agentId=i)
    # c.step(action="LookUp", degrees=30, 'agent_id':i)

# 在文件开头添加配置
DISPLAY_IMAGES = False  # 设置为 False 来禁用图像显示

def exec_actions():
    global total_exec, success_exec
    # delete if current output already exist
    cur_path = os.path.dirname(__file__) + "/*/"
    for x in glob(cur_path, recursive = True):
        shutil.rmtree (x)
    
    # create new folders to save the images from the agents
    for i in range(no_robot):
        folder_name = "agent_" + str(i+1)
        folder_path = os.path.dirname(__file__) + "/" + folder_name
        if not os.path.exists(folder_path):
            os.makedirs(folder_path)
    
    # create folder to store the top view images
    folder_name = "top_view"
    folder_path = os.path.dirname(__file__) + "/" + folder_name
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    
    img_counter = 0
    
    while not task_over:
        if len(action_queue) > 0:
            try:
                act = action_queue[0]
                if act['action'] == 'ObjectNavExpertAction':
                    multi_agent_event = c.step(dict(action=act['action'], position=act['position'], agentId=act['agent_id']))
                    next_action = multi_agent_event.metadata['actionReturn']

                    if next_action != None:
                        multi_agent_event = c.step(action=next_action, agentId=act['agent_id'], forceAction=True)
                
                elif act['action'] == 'MoveAhead':
                    multi_agent_event = c.step(action="MoveAhead", agentId=act['agent_id'])
                    
                elif act['action'] == 'MoveBack':
                    multi_agent_event = c.step(action="MoveBack", agentId=act['agent_id'])
                        
                elif act['action'] == 'RotateLeft':
                    multi_agent_event = c.step(action="RotateLeft", degrees=act['degrees'], agentId=act['agent_id'])
                    
                elif act['action'] == 'RotateRight':
                    multi_agent_event = c.step(action="RotateRight", degrees=act['degrees'], agentId=act['agent_id'])
                    
                elif act['action'] == 'PickupObject':
                    total_exec += 1
                    multi_agent_event = c.step(action="PickupObject", objectId=act['objectId'], agentId=act['agent_id'], forceAction=True)
                    if multi_agent_event.metadata['errorMessage'] != "":
                        print (multi_agent_event.metadata['errorMessage'])
                    else:
                        success_exec += 1
 
                elif act['action'] == 'PutObject':
                    total_exec += 1
                    multi_agent_event = c.step(action="PutObject", objectId=act['objectId'], agentId=act['agent_id'], forceAction=True)
                    if multi_agent_event.metadata['errorMessage'] != "":
                        print (multi_agent_event.metadata['errorMessage'])
                    else:
                        success_exec += 1
 
                elif act['action'] == 'ToggleObjectOn':
                    total_exec += 1
                    multi_agent_event = c.step(action="ToggleObjectOn", objectId=act['objectId'], agentId=act['agent_id'], forceAction=True)
                    if multi_agent_event.metadata['errorMessage'] != "":
                        print (multi_agent_event.metadata['errorMessage'])
                    else:
                        success_exec += 1
                
                elif act['action'] == 'ToggleObjectOff':
                    total_exec += 1
                    multi_agent_event = c.step(action="ToggleObjectOff", objectId=act['objectId'], agentId=act['agent_id'], forceAction=True)
                    if multi_agent_event.metadata['errorMessage'] != "":
                        print (multi_agent_event.metadata['errorMessage'])
                    else:
                        success_exec += 1
                    
                elif act['action'] == 'OpenObject':
                    total_exec += 1
                    multi_agent_event = c.step(action="OpenObject", objectId=act['objectId'], agentId=act['agent_id'], forceAction=True)
                    if multi_agent_event.metadata['errorMessage'] != "":
                        print (multi_agent_event.metadata['errorMessage'])
                    else:
                        success_exec += 1
 
                    
                elif act['action'] == 'CloseObject':
                    total_exec += 1
                    multi_agent_event = c.step(action="CloseObject", objectId=act['objectId'], agentId=act['agent_id'], forceAction=True)
                    if multi_agent_event.metadata['errorMessage'] != "":
                        print (multi_agent_event.metadata['errorMessage'])
                    else:
                        success_exec += 1
                        
                elif act['action'] == 'SliceObject':
                    total_exec += 1
                    multi_agent_event = c.step(action="SliceObject", objectId=act['objectId'], agentId=act['agent_id'], forceAction=True)
                    if multi_agent_event.metadata['errorMessage'] != "":
                        print (multi_agent_event.metadata['errorMessage'])
                    else:
                        success_exec += 1
                        
                elif act['action'] == 'ThrowObject':
                    total_exec += 1
                    multi_agent_event = c.step(action="ThrowObject", moveMagnitude=7, agentId=act['agent_id'], forceAction=True)
                    if multi_agent_event.metadata['errorMessage'] != "":
                        print (multi_agent_event.metadata['errorMessage'])
                    else:
                        success_exec += 1
                        
                elif act['action'] == 'BreakObject':
                    total_exec += 1
                    multi_agent_event = c.step(action="BreakObject", objectId=act['objectId'], agentId=act['agent_id'], forceAction=True)
                    if multi_agent_event.metadata['errorMessage'] != "":
                        print (multi_agent_event.metadata['errorMessage'])
                    else:
                        success_exec += 1
 
                
                elif act['action'] == 'Done':
                    multi_agent_event = c.step(action="Done")
                    
                    
            except Exception as e:
                print (e)
                
            for i,e in enumerate(multi_agent_event.events):
                f_name = os.path.dirname(__file__) + "/agent_" + str(i+1) + "/img_" + str(img_counter).zfill(5) + ".png"
                cv2.imwrite(f_name, e.cv2img)
                if DISPLAY_IMAGES:
                    cv2.imshow('agent%s' % i, e.cv2img)
                    
            top_view_rgb = cv2.cvtColor(c.last_event.events[0].third_party_camera_frames[-1], cv2.COLOR_BGR2RGB)
            f_name = os.path.dirname(__file__) + "/top_view/img_" + str(img_counter).zfill(5) + ".png"
            cv2.imwrite(f_name, top_view_rgb)
            if DISPLAY_IMAGES:
                cv2.imshow('Top View', top_view_rgb)
                if cv2.waitKey(25) & 0xFF == ord('q'):
                    break
            
            img_counter += 1    
            action_queue.pop(0)
       
actions_thread = threading.Thread(target=exec_actions)
actions_thread.start()

def GoToObject(robots, dest_obj):
    global recp_id
    
    # check if robots is a list
    
    if not isinstance(robots, list):
        # convert robot to a list
        robots = [robots]
    no_agents = len (robots)
    # robots distance to the goal 
    dist_goals = [10.0] * len(robots)
    prev_dist_goals = [10.0] * len(robots)
    count_since_update = [0] * len(robots)
    clost_node_location = [0] * len(robots)
    
    # list of objects in the scene and their centers
    objs = list([obj["objectId"] for obj in c.last_event.metadata["objects"]])
    objs_center = list([obj["axisAlignedBoundingBox"]["center"] for obj in c.last_event.metadata["objects"]])
    if "|" in dest_obj:
        # obj alredy given
        dest_obj_id = dest_obj
        pos_arr = dest_obj_id.split("|")
        dest_obj_center = {'x': float(pos_arr[1]), 'y': float(pos_arr[2]), 'z': float(pos_arr[3])}
    else:
        for idx, obj in enumerate(objs):
            
            match = re.match(dest_obj, obj)
            if match is not None:
                dest_obj_id = obj
                dest_obj_center = objs_center[idx]
                if dest_obj_center != {'x': 0.0, 'y': 0.0, 'z': 0.0}:
                    break # find the first instance
        
    print ("Going to ", dest_obj_id, dest_obj_center)
        
    dest_obj_pos = [dest_obj_center['x'], dest_obj_center['y'], dest_obj_center['z']] 
    
    # closest reachable position for each robot
    # all robots cannot reach the same spot 
    # differt close points needs to be found for each robot
    crp = closest_node(dest_obj_pos, reachable_positions, no_agents, clost_node_location)
    
    goal_thresh = 0.25
    # at least one robot is far away from the goal
    
    while all(d > goal_thresh for d in dist_goals):
        for ia, robot in enumerate(robots):
            robot_name = robot['name']
            agent_id = int(robot_name[-1]) - 1
            
            # get the pose of robot        
            metadata = c.last_event.events[agent_id].metadata
            location = {
                "x": metadata["agent"]["position"]["x"],
                "y": metadata["agent"]["position"]["y"],
                "z": metadata["agent"]["position"]["z"],
                "rotation": metadata["agent"]["rotation"]["y"],
                "horizon": metadata["agent"]["cameraHorizon"]}
            
            prev_dist_goals[ia] = dist_goals[ia] # store the previous distance to goal
            dist_goals[ia] = distance_pts([location['x'], location['y'], location['z']], crp[ia])
            
            dist_del = abs(dist_goals[ia] - prev_dist_goals[ia])
            # print (ia, "Dist to Goal: ", dist_goals[ia], dist_del, clost_node_location[ia])
            if dist_del < 0.2:
                # robot did not move 
                count_since_update[ia] += 1
            else:
                # robot moving 
                count_since_update[ia] = 0
                
            if count_since_update[ia] < 8:
                action_queue.append({'action':'ObjectNavExpertAction', 'position':dict(x=crp[ia][0], y=crp[ia][1], z=crp[ia][2]), 'agent_id':agent_id})
            else:    
                #updating goal
                clost_node_location[ia] += 1
                count_since_update[ia] = 0
                crp = closest_node(dest_obj_pos, reachable_positions, no_agents, clost_node_location)
    
            time.sleep(0.5)

    # align the robot once goal is reached
    # compute angle between robot heading and object
    metadata = c.last_event.events[agent_id].metadata
    robot_location = {
        "x": metadata["agent"]["position"]["x"],
        "y": metadata["agent"]["position"]["y"],
        "z": metadata["agent"]["position"]["z"],
        "rotation": metadata["agent"]["rotation"]["y"],
        "horizon": metadata["agent"]["cameraHorizon"]}
    
    robot_object_vec = [dest_obj_pos[0] -robot_location['x'], dest_obj_pos[2]-robot_location['z']]
    y_axis = [0, 1]
    unit_y = y_axis / np.linalg.norm(y_axis)
    unit_vector = robot_object_vec / np.linalg.norm(robot_object_vec)
    
    angle = math.atan2(np.linalg.det([unit_vector,unit_y]),np.dot(unit_vector,unit_y))
    angle = 360*angle/(2*np.pi)
    angle = (angle + 360) % 360
    rot_angle = angle - robot_location['rotation']
    
    if rot_angle > 0:
        action_queue.append({'action':'RotateRight', 'degrees':abs(rot_angle), 'agent_id':agent_id})
    else:
        action_queue.append({'action':'RotateLeft', 'degrees':abs(rot_angle), 'agent_id':agent_id})
        
    print ("Reached: ", dest_obj)
    if dest_obj == "Cabinet" or dest_obj == "Fridge" or dest_obj == "CounterTop":
        recp_id = dest_obj_id
    
def PickupObject(robots, pick_obj):
    if not isinstance(robots, list):
        # convert robot to a list
        robots = [robots]
    no_agents = len (robots)
    # robots distance to the goal 
    for idx in range(no_agents):
        robot = robots[idx]
        print ("PIcking: ", pick_obj)
        robot_name = robot['name']
        agent_id = int(robot_name[-1]) - 1
        # list of objects in the scene and their centers
        objs = list([obj["objectId"] for obj in c.last_event.metadata["objects"]])
        objs_center = list([obj["axisAlignedBoundingBox"]["center"] for obj in c.last_event.metadata["objects"]])
        
        for idx, obj in enumerate(objs):
            match = re.match(pick_obj, obj)
            if match is not None:
                pick_obj_id = obj
                dest_obj_center = objs_center[idx]
                if dest_obj_center != {'x': 0.0, 'y': 0.0, 'z': 0.0}:
                    break # find the first instance
        # GoToObject(robot, pick_obj_id)
        # time.sleep(1)
        print ("Picking Up ", pick_obj_id, dest_obj_center)
        action_queue.append({'action':'PickupObject', 'objectId':pick_obj_id, 'agent_id':agent_id})
        time.sleep(1)
    
def PutObject(robot, put_obj, recp):
    robot_name = robot['name']
    agent_id = int(robot_name[-1]) - 1
    objs = list(set([obj["objectId"] for obj in c.last_event.metadata["objects"]]))
    objs_center = list([obj["axisAlignedBoundingBox"]["center"] for obj in c.last_event.metadata["objects"]])
    objs_dists = list([obj["distance"] for obj in c.last_event.metadata["objects"]])

    metadata = c.last_event.events[agent_id].metadata
    robot_location = [metadata["agent"]["position"]["x"], metadata["agent"]["position"]["y"], metadata["agent"]["position"]["z"]]
    dist_to_recp = 9999999 # distance b/w robot and the recp obj
    for idx, obj in enumerate(objs):
        match = re.match(recp, obj)
        if match is not None:
            dist = objs_dists[idx]
            if dist < dist_to_recp:
                recp_obj_id = obj
                dest_obj_center = objs_center[idx]
                dist_to_recp = dist
                
    
    global recp_id         
    # if recp_id is not None:
    #     recp_obj_id = recp_id
    # GoToObject(robot, recp_obj_id)
    # time.sleep(1)
    action_queue.append({'action':'PutObject', 'objectId':recp_obj_id, 'agent_id':agent_id})
    time.sleep(1)
         
def SwitchOn(robot, sw_obj):
    print ("Switching On: ", sw_obj)
    robot_name = robot['name']
    agent_id = int(robot_name[-1]) - 1
    objs = list(set([obj["objectId"] for obj in c.last_event.metadata["objects"]]))
    
    # turn on all stove burner
    if sw_obj == "StoveKnob":
        for obj in objs:
            match = re.match(sw_obj, obj)
            if match is not None:
                sw_obj_id = obj
                GoToObject(robot, sw_obj_id)
                # time.sleep(1)
                action_queue.append({'action':'ToggleObjectOn', 'objectId':sw_obj_id, 'agent_id':agent_id})
                time.sleep(0.1)
    
    # all objects apart from Stove Burner
    else:
        for obj in objs:
            match = re.match(sw_obj, obj)
            if match is not None:
                sw_obj_id = obj
                break # find the first instance
        GoToObject(robot, sw_obj_id)
        time.sleep(1)
        action_queue.append({'action':'ToggleObjectOn', 'objectId':sw_obj_id, 'agent_id':agent_id})
        time.sleep(1)            
        
def SwitchOff(robot, sw_obj):
    print ("Switching Off: ", sw_obj)
    robot_name = robot['name']
    agent_id = int(robot_name[-1]) - 1
    objs = list(set([obj["objectId"] for obj in c.last_event.metadata["objects"]]))
    
    # turn on all stove burner
    if sw_obj == "StoveKnob":
        for obj in objs:
            match = re.match(sw_obj, obj)
            if match is not None:
                sw_obj_id = obj
                action_queue.append({'action':'ToggleObjectOff', 'objectId':sw_obj_id, 'agent_id':agent_id})
                time.sleep(0.1)
    
    # all objects apart from Stove Burner
    else:
        for obj in objs:
            match = re.match(sw_obj, obj)
            if match is not None:
                sw_obj_id = obj
                break # find the first instance
        GoToObject(robot, sw_obj_id)
        time.sleep(1)
        action_queue.append({'action':'ToggleObjectOff', 'objectId':sw_obj_id, 'agent_id':agent_id})
        time.sleep(1)      
    
def OpenObject(robot, sw_obj):
    robot_name = robot['name']
    agent_id = int(robot_name[-1]) - 1
    objs = list(set([obj["objectId"] for obj in c.last_event.metadata["objects"]]))
    
    for obj in objs:
        match = re.match(sw_obj, obj)
        if match is not None:
            sw_obj_id = obj
            break # find the first instance
        
    global recp_id
    if recp_id is not None:
        sw_obj_id = recp_id
    
    GoToObject(robot, sw_obj_id)
    time.sleep(1)
    action_queue.append({'action':'OpenObject', 'objectId':sw_obj_id, 'agent_id':agent_id})
    time.sleep(1)
    
def CloseObject(robot, sw_obj):
    robot_name = robot['name']
    agent_id = int(robot_name[-1]) - 1
    objs = list(set([obj["objectId"] for obj in c.last_event.metadata["objects"]]))
    
    for obj in objs:
        match = re.match(sw_obj, obj)
        if match is not None:
            sw_obj_id = obj
            break # find the first instance
        
    global recp_id
    if recp_id is not None:
        sw_obj_id = recp_id
        
    GoToObject(robot, sw_obj_id)
    time.sleep(1)
    
    action_queue.append({'action':'CloseObject', 'objectId':sw_obj_id, 'agent_id':agent_id}) 
    
    if recp_id is not None:
        recp_id = None
    time.sleep(1)
    
def BreakObject(robot, sw_obj):
    robot_name = robot['name']
    agent_id = int(robot_name[-1]) - 1
    objs = list(set([obj["objectId"] for obj in c.last_event.metadata["objects"]]))
    
    for obj in objs:
        match = re.match(sw_obj, obj)
        if match is not None:
            sw_obj_id = obj
            break # find the first instance
    GoToObject(robot, sw_obj_id)
    time.sleep(1)
    action_queue.append({'action':'BreakObject', 'objectId':sw_obj_id, 'agent_id':agent_id}) 
    time.sleep(1)
    
def SliceObject(robot, sw_obj):
    print ("Slicing: ", sw_obj)
    robot_name = robot['name']
    agent_id = int(robot_name[-1]) - 1
    objs = list(set([obj["objectId"] for obj in c.last_event.metadata["objects"]]))
    
    for obj in objs:
        match = re.match(sw_obj, obj)
        if match is not None:
            sw_obj_id = obj
            break # find the first instance
    GoToObject(robot, sw_obj_id)
    time.sleep(1)
    action_queue.append({'action':'SliceObject', 'objectId':sw_obj_id, 'agent_id':agent_id})      
    time.sleep(1)
    
def CleanObject(robot, sw_obj):
    robot_name = robot['name']
    agent_id = int(robot_name[-1]) - 1
    objs = list(set([obj["objectId"] for obj in c.last_event.metadata["objects"]]))

    for obj in objs:
        match = re.match(sw_obj, obj)
        if match is not None:
            sw_obj_id = obj
            break # find the first instance
    GoToObject(robot, sw_obj_id)
    time.sleep(1)
    action_queue.append({'action':'CleanObject', 'objectId':sw_obj_id, 'agent_id':agent_id}) 
    time.sleep(1)
    
def ThrowObject(robot, sw_obj):
    robot_name = robot['name']
    agent_id = int(robot_name[-1]) - 1
    objs = list(set([obj["objectId"] for obj in c.last_event.metadata["objects"]]))

    for obj in objs:
        match = re.match(sw_obj, obj)
        if match is not None:
            sw_obj_id = obj
            break # find the first instance
    
    action_queue.append({'action':'ThrowObject', 'objectId':sw_obj_id, 'agent_id':agent_id}) 
    time.sleep(1)

'''
### Code Plan Start
'''
def turn_on_sink_faucet(robot_list):
    # robot_list = [robot1]
    # 0: SubTask 1: Turn on Sink faucet
    # 1: Go to the Sink using robot1.
    GoToObject(robot_list[0],'Sink')
    # 2: Turn on the Faucet using robot1.
    SwitchOn(robot_list[0],'Faucet')

def put_toilet_paper_in_trash(robot_list):
    # robot_list = [robot2]
    # 0: SubTask 2: Put toilet paper in the trash
    # 1: Go to the Toilet Paper using robot2.
    GoToObject(robot_list[0],'ToiletPaper')
    # 2: Pick up the Toilet Paper using robot2.
    PickupObject(robot_list[0],'ToiletPaper')
    # 3: Go to the Trash Can using robot2.
    GoToObject(robot_list[0],'TrashCan')
    # 4: Put Toilet Paper in the Trash Can using robot2.
    PutObject(robot_list[0],'ToiletPaper', 'TrashCan')

# Parallelize SubTask 1 and SubTask 2
task1_thread = threading.Thread(target=turn_on_sink_faucet, args=([robots[0]],))
task2_thread = threading.Thread(target=put_toilet_paper_in_trash, args=([robots[1]],))

# Start executing SubTask 1 and SubTask 2 in parallel
task1_thread.start()
task2_thread.start()

# Wait for both SubTask 1 and SubTask 2 to finish
task1_thread.join()
task2_thread.join()

# Task Turn on Sink faucet and put toilet paper in the trash is done
'''
### Code Plan End
'''

no_trans = 1

for i in range(25):
    action_queue.append({'action':'Done'})
    action_queue.append({'action':'Done'})
    action_queue.append({'action':'Done'})
    time.sleep(0.1)

task_over = True
time.sleep(5)


exec = float(success_exec) / float(total_exec)

print (ground_truth)
objs = list([obj for obj in c.last_event.metadata["objects"]])

gcr_tasks = 0.0
gcr_complete = 0.0
for obj_gt in ground_truth:
    obj_name = obj_gt['name']
    state = obj_gt['state']
    contains = obj_gt['contains']
    gcr_tasks += 1
    for obj in objs:
        # if obj_name in obj["name"]:
        #     print (obj)
        if state == 'SLICED':
            if obj_name in obj["name"] and obj["isSliced"]:
                gcr_complete += 1 
                
        if state == 'OFF':
            if obj_name in obj["name"] and not obj["isToggled"]:
                gcr_complete += 1 
        
        if state == 'ON':
            if obj_name in obj["name"] and obj["isToggled"]:
                gcr_complete += 1 
        
        if state == 'HOT':
            # print (obj)
            if obj_name in obj["name"] and obj["temperature"] == 'Hot':
                gcr_complete += 1 
                
        if state == 'COOKED':
            if obj_name in obj["name"] and obj["isCooked"]:
                gcr_complete += 1 
                
        if state == 'OPENED':
            if obj_name in obj["name"] and obj["isOpen"]:
                gcr_complete += 1 
                
        if state == 'CLOSED':
            if obj_name in obj["name"] and not obj["isOpen"]:
                gcr_complete += 1 
                
        if state == 'PICKED':
            if obj_name in obj["name"] and obj["isPickedUp"]:
                gcr_complete += 1 
        
        if len(contains) != 0 and obj_name in obj["name"]:
            print (contains, obj_name, obj["name"])   
            for rec in contains:
                if obj['receptacleObjectIds'] is not None:
                    for r in obj['receptacleObjectIds']:
                        print (rec, r)
                        if rec in r:
                            print (rec, r)
                            gcr_complete += 1 
                    
            
             
sr = 0
tc = 0
if gcr_tasks == 0:
    gcr = 1
else:
    gcr = gcr_complete / gcr_tasks

if gcr == 1.0:
    tc = 1 
    
max_trans += 1
no_trans_gt += 1
print (no_trans_gt, max_trans, no_trans)
if max_trans == no_trans_gt and no_trans_gt == no_trans:
    ru = 1
elif max_trans == no_trans_gt:
    ru = 0
else:
    ru =  (max_trans - no_trans) / (max_trans - no_trans_gt)

if tc == 1 and ru == 1:
    sr = 1

print (f"SR:{sr}, TC:{tc}, GCR:{gcr}, Exec:{exec}, RU:{ru}")



generate_video()
event = c.last_event
object_info = {}
multi_agent_info = {}

def save_environment_states_to_file(object_info, agent_info, reachable_p, obj_changed=None):
    data = {
        "object_info": object_info,
        "agent_info": agent_info,
        "reachable_positions": reachable_p,
        "obj_changed": obj_changed,
    }
    cur_path = os.path.dirname(__file__) + "/"
    with open(os.path.join(cur_path, 'environment_states.json'), 'w') as f:
        json.dump(data, f, indent=4)


def closest_agent_to_object(agents, object):
    """
    find the closest agent

    :param agents: a dict of agents info, contain position (x, y, z)
    :param object: a certain object info, contain position (x, y, z)
    :return: closest agent index
    """
    object_position = object['position']
    closest_index = None
    closest_distance = float('inf')

    for index, agent_pos in enumerate(agents):
        # agent_pos = agent['position']
        distance = math.sqrt(
            (agent_pos['x'] - object_position['x']) ** 2 +
            (agent_pos['y'] - object_position['y']) ** 2 +
            (agent_pos['z'] - object_position['z']) ** 2
        )
        if distance < closest_distance:
            closest_distance = distance
            closest_index = index

    return closest_index

agent_pos = []
# c.last_event.events[agent_id].metadata
for i in range(no_robot):
    agent_e = c.last_event.events[i].metadata
    multi_agent_info['agent_'+ str(i)] = agent_e['agent']
    agent_pos.append(agent_e['agent']['position'])


obj_changed = [[] for _ in range(no_robot)]
for obj in event.metadata['objects']:
    cur_obj = {
                    "objectId": obj["objectId"],
                    "objectType": obj["objectType"],
                    "position": obj["position"],
                    "isPickedUp": obj.get("isPickedUp", False),
                    "isOpen": obj.get("isOpen", False),
                    "isSliced": obj.get("isSliced", False),
                    "isToggled": obj.get("isToggled", False),
                    "isBroken": obj.get("isBroken", False),
                    "isFilledWithLiquid": obj.get("isFilledWithLiquid", False),
                    "mass": obj.get("mass", 0.0),
                    "center": obj.get("axisAlignedBoundingBox", {}).get("center", None),
                    "state": obj.get("state", "None")
                }
    object_info[obj['name']] = cur_obj
    if obj['isPickedUp']:
        closest_agent_idx = closest_agent_to_object(agent_pos, cur_obj)
        obj_changed[closest_agent_idx].append(cur_obj)


reachable_p_ = c.step(action="GetReachablePositions").metadata["actionReturn"]
reachable_p = [(p["x"], p["y"], p["z"]) for p in reachable_p_]
c.stop()
save_environment_states_to_file(object_info, multi_agent_info, reachable_p, obj_changed)





- env_state
{
    "object_info": {
        "Bathtub_88d26613": {
            "objectId": "Bathtub|-00.44|+00.18|+01.58",
            "objectType": "Bathtub",
            "position": {
                "x": -0.4350000023841858,
                "y": 0.18299999833106995,
                "z": 1.5759999752044678
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -0.4418562650680542,
                "y": 0.4134640097618103,
                "z": 1.692312240600586
            },
            "state": "None"
        },
        "BathtubBasin_143634c4": {
            "objectId": "Bathtub|-00.44|+00.18|+01.58|BathtubBasin",
            "objectType": "BathtubBasin",
            "position": {
                "x": -0.4350000023841858,
                "y": 0.1850000023841858,
                "z": 1.5440000295639038
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -0.44428858160972595,
                "y": 0.3944460153579712,
                "z": 1.5853689908981323
            },
            "state": "None"
        },
        "Cabinet_03c04804": {
            "objectId": "Cabinet|-02.41|+00.37|+02.86",
            "objectType": "Cabinet",
            "position": {
                "x": -2.410099983215332,
                "y": 0.3718014359474182,
                "z": 2.862452983856201
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.658266544342041,
                "y": 0.37365737557411194,
                "z": 2.660383939743042
            },
            "state": "None"
        },
        "Cabinet_fab6c382": {
            "objectId": "Cabinet|-02.41|+00.37|+02.91",
            "objectType": "Cabinet",
            "position": {
                "x": -2.410099983215332,
                "y": 0.3718014359474182,
                "z": 2.9137167930603027
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.6496424674987793,
                "y": 0.3747806251049042,
                "z": 3.0766820907592773
            },
            "state": "None"
        },
        "Cabinet_eed36e22": {
            "objectId": "Cabinet|-02.41|+02.02|+03.57",
            "objectType": "Cabinet",
            "position": {
                "x": -2.410099983215332,
                "y": 2.0220000743865967,
                "z": 3.570129871368408
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.6499576568603516,
                "y": 2.0220000743865967,
                "z": 3.4072537422180176
            },
            "state": "None"
        },
        "Cabinet_b5e478fd": {
            "objectId": "Cabinet|-02.41|+00.37|+01.59",
            "objectType": "Cabinet",
            "position": {
                "x": -2.410099983215332,
                "y": 0.3718014359474182,
                "z": 1.5854789018630981
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.6583306789398193,
                "y": 0.37445011734962463,
                "z": 1.7860866785049438
            },
            "state": "None"
        },
        "Cabinet_965165f3": {
            "objectId": "Cabinet|-02.41|+02.02|+02.91",
            "objectType": "Cabinet",
            "position": {
                "x": -2.410099983215332,
                "y": 2.0220000743865967,
                "z": 2.9137167930603027
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.649721384048462,
                "y": 2.0220000743865967,
                "z": 3.0769824981689453
            },
            "state": "None"
        },
        "Cabinet_70a49f19": {
            "objectId": "Cabinet|-02.41|+01.26|+02.91",
            "objectType": "Cabinet",
            "position": {
                "x": -2.410099983215332,
                "y": 1.2614940404891968,
                "z": 2.9137167930603027
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.649721384048462,
                "y": 1.2614940404891968,
                "z": 3.0769824981689453
            },
            "state": "None"
        },
        "Cabinet_32d10628": {
            "objectId": "Cabinet|-02.41|+00.37|+02.04",
            "objectType": "Cabinet",
            "position": {
                "x": -2.410099983215332,
                "y": 0.3718014359474182,
                "z": 2.040908098220825
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.6583304405212402,
                "y": 0.37445011734962463,
                "z": 2.242595672607422
            },
            "state": "None"
        },
        "Cabinet_570ca82c": {
            "objectId": "Cabinet|-02.41|+00.37|+03.57",
            "objectType": "Cabinet",
            "position": {
                "x": -2.410099983215332,
                "y": 0.3718014359474182,
                "z": 3.570129871368408
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.6507320404052734,
                "y": 0.3718014359474182,
                "z": 3.40708065032959
            },
            "state": "None"
        },
        "Cabinet_65024dc2": {
            "objectId": "Cabinet|-02.41|+01.26|+03.57",
            "objectType": "Cabinet",
            "position": {
                "x": -2.410099983215332,
                "y": 1.2614940404891968,
                "z": 3.570129871368408
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.6499576568603516,
                "y": 1.2614940404891968,
                "z": 3.4072537422180176
            },
            "state": "None"
        },
        "Candle_d0b58c31": {
            "objectId": "Candle|-02.36|+01.20|+01.46",
            "objectType": "Candle",
            "position": {
                "x": -2.362346649169922,
                "y": 1.204668402671814,
                "z": 1.4579495191574097
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.20000000298023224,
            "center": {
                "x": -2.362346649169922,
                "y": 1.279610276222229,
                "z": 1.4579495191574097
            },
            "state": "None"
        },
        "Cloth_094a28e1": {
            "objectId": "Cloth|-00.46|+00.18|+01.50",
            "objectType": "Cloth",
            "position": {
                "x": -0.46002742648124695,
                "y": 0.18139848113059998,
                "z": 1.500869631767273
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.04500000178813934,
            "center": {
                "x": -0.45984703302383423,
                "y": 0.20944704115390778,
                "z": 1.5053540468215942
            },
            "state": "None"
        },
        "CounterTop_0ab97a3f": {
            "objectId": "CounterTop|-02.69|+00.97|+02.26",
            "objectType": "CounterTop",
            "position": {
                "x": -2.688999891281128,
                "y": 0.9660999774932861,
                "z": 2.260999917984009
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.691574811935425,
                "y": 0.921230673789978,
                "z": 2.2344443798065186
            },
            "state": "None"
        },
        "CounterTop_48094342": {
            "objectId": "CounterTop|-02.61|+01.24|+01.46",
            "objectType": "CounterTop",
            "position": {
                "x": -2.6110000610351562,
                "y": 1.2430000305175781,
                "z": 1.4559999704360962
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.7478766441345215,
                "y": 1.2055542469024658,
                "z": 1.4563978910446167
            },
            "state": "None"
        },
        "DishSponge_26899ef4": {
            "objectId": "DishSponge|-02.90|+01.07|+00.78",
            "objectType": "DishSponge",
            "position": {
                "x": -2.897063732147217,
                "y": 1.070255160331726,
                "z": 0.7832596898078918
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.029999997466802597,
            "center": {
                "x": -2.897008180618286,
                "y": 1.0811831951141357,
                "z": 0.7832726240158081
            },
            "state": "None"
        },
        "Drawer_09c6b54d": {
            "objectId": "Drawer|-02.64|+00.77|+03.24",
            "objectType": "Drawer",
            "position": {
                "x": -2.6389999389648438,
                "y": 0.7677000164985657,
                "z": 3.239581823348999
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.647055149078369,
                "y": 0.7918725609779358,
                "z": 3.239581823348999
            },
            "state": "None"
        },
        "Faucet_9505d61e": {
            "objectId": "Faucet|-00.43|+00.00|+00.76",
            "objectType": "Faucet",
            "position": {
                "x": -0.4259640574455261,
                "y": 0.001753091812133789,
                "z": 0.7631934881210327
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": true,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -0.4437064826488495,
                "y": 0.4478023052215576,
                "z": 0.8464309573173523
            },
            "state": "None"
        },
        "Faucet_9e93afaf": {
            "objectId": "Faucet|-02.93|+00.98|+02.23",
            "objectType": "Faucet",
            "position": {
                "x": -2.9281020164489746,
                "y": 0.978632926940918,
                "z": 2.231100082397461
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.8326704502105713,
                "y": 1.0522572994232178,
                "z": 2.231100082397461
            },
            "state": "None"
        },
        "Floor_49e5caec": {
            "objectId": "Floor|-00.99|00.00|+01.80",
            "objectType": "Floor",
            "position": {
                "x": -0.9938390851020813,
                "y": -0.004581363871693611,
                "z": 1.8027180433273315
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 1.0,
            "center": {
                "x": -1.9019097089767456,
                "y": -0.17664197087287903,
                "z": 2.3664538860321045
            },
            "state": "None"
        },
        "GarbageCan_d3abea71": {
            "objectId": "GarbageCan|-00.40|-00.03|+00.24",
            "objectType": "GarbageCan",
            "position": {
                "x": -0.40396663546562195,
                "y": -0.02764439582824707,
                "z": 0.24129138886928558
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.699999988079071,
            "center": {
                "x": -0.41029027104377747,
                "y": 0.29078954458236694,
                "z": 0.240960031747818
            },
            "state": "None"
        },
        "HandTowel_b4733277": {
            "objectId": "HandTowel|-02.70|+01.52|+02.87",
            "objectType": "HandTowel",
            "position": {
                "x": -2.69821834564209,
                "y": 1.5210000276565552,
                "z": 2.8678090572357178
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.07999999821186066,
            "center": {
                "x": -2.69821834564209,
                "y": 1.3257453441619873,
                "z": 2.8705832958221436
            },
            "state": "None"
        },
        "HandTowelHolder_6e373ebe": {
            "objectId": "HandTowelHolder|-02.70|+01.62|+02.91",
            "objectType": "HandTowelHolder",
            "position": {
                "x": -2.69821834564209,
                "y": 1.6230000257492065,
                "z": 2.906109094619751
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.7001185417175293,
                "y": 1.562441349029541,
                "z": 2.8817954063415527
            },
            "state": "None"
        },
        "LightSwitch_91b150f5": {
            "objectId": "LightSwitch|-01.68|+01.44|+03.61",
            "objectType": "LightSwitch",
            "position": {
                "x": -1.6759999990463257,
                "y": 1.4420000314712524,
                "z": 3.610490083694458
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": true,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -1.6760001182556152,
                "y": 1.4420000314712524,
                "z": 3.5919666290283203
            },
            "state": "None"
        },
        "Mirror_7d828f44": {
            "objectId": "Mirror|-02.97|+01.61|+02.27",
            "objectType": "Mirror",
            "position": {
                "x": -2.973728895187378,
                "y": 1.6130000352859497,
                "z": 2.265000104904175
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.964393138885498,
                "y": 1.5892131328582764,
                "z": 2.267972946166992
            },
            "state": "None"
        },
        "PaperTowelRoll_f0a44de0": {
            "objectId": "PaperTowelRoll|-02.89|+01.18|+00.56",
            "objectType": "PaperTowelRoll",
            "position": {
                "x": -2.892759323120117,
                "y": 1.1760733127593994,
                "z": 0.5617468357086182
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.2199999988079071,
            "center": {
                "x": -2.9006357192993164,
                "y": 1.1760828495025635,
                "z": 0.5602766275405884
            },
            "state": "None"
        },
        "Plunger_49caea13": {
            "objectId": "Plunger|-02.84|+00.00|+00.13",
            "objectType": "Plunger",
            "position": {
                "x": -2.837317705154419,
                "y": 0.0012895017862319946,
                "z": 0.13198821246623993
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 1.0,
            "center": {
                "x": -2.83731746673584,
                "y": 0.2714223861694336,
                "z": 0.1319178193807602
            },
            "state": "None"
        },
        "ScrubBrush_7a3727f9": {
            "objectId": "ScrubBrush|-02.83|+00.00|+00.30",
            "objectType": "ScrubBrush",
            "position": {
                "x": -2.831652879714966,
                "y": 0.0017531216144561768,
                "z": 0.29544511437416077
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.1899999976158142,
            "center": {
                "x": -2.831653118133545,
                "y": 0.23994746804237366,
                "z": 0.29544520378112793
            },
            "state": "None"
        },
        "Sink_623a50c3": {
            "objectId": "Sink|-02.72|+00.86|+02.23",
            "objectType": "Sink",
            "position": {
                "x": -2.7232649326324463,
                "y": 0.8620175719261169,
                "z": 2.2319998741149902
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.648437023162842,
                "y": 0.9443130493164062,
                "z": 2.2319998741149902
            },
            "state": "None"
        },
        "SinkBasin_2e79e29d": {
            "objectId": "Sink|-02.72|+00.86|+02.23|SinkBasin",
            "objectType": "SinkBasin",
            "position": {
                "x": -2.736264944076538,
                "y": 0.9290175437927246,
                "z": 2.241999864578247
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.7382731437683105,
                "y": 0.9888055324554443,
                "z": 2.2320849895477295
            },
            "state": "None"
        },
        "SoapBar_640b2b16": {
            "objectId": "SoapBar|-02.82|+00.92|+01.78",
            "objectType": "SoapBar",
            "position": {
                "x": -2.8191401958465576,
                "y": 0.9200425148010254,
                "z": 1.7790570259094238
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.10999999940395355,
            "center": {
                "x": -2.8191401958465576,
                "y": 0.9321801066398621,
                "z": 1.7790567874908447
            },
            "state": "None"
        },
        "SoapBottle_3b737f5e": {
            "objectId": "SoapBottle|-02.86|+00.92|+02.66",
            "objectType": "SoapBottle",
            "position": {
                "x": -2.8610000610351562,
                "y": 0.9189969301223755,
                "z": 2.6600003242492676
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.4000000059604645,
            "center": {
                "x": -2.860999584197998,
                "y": 1.0211992263793945,
                "z": 2.660000801086426
            },
            "state": "None"
        },
        "SprayBottle_39bd820f": {
            "objectId": "SprayBottle|-02.64|+00.90|+03.09",
            "objectType": "SprayBottle",
            "position": {
                "x": -2.643894910812378,
                "y": 0.8961831331253052,
                "z": 3.0887367725372314
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.10999999940395355,
            "center": {
                "x": -2.6477878093719482,
                "y": 1.019413948059082,
                "z": 3.0888991355895996
            },
            "state": "None"
        },
        "Toilet_0d3f5e4c": {
            "objectId": "Toilet|-02.58|+00.03|+00.66",
            "objectType": "Toilet",
            "position": {
                "x": -2.5799999237060547,
                "y": 0.03271421045064926,
                "z": 0.656000018119812
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.5660252571105957,
                "y": 0.549902081489563,
                "z": 0.6558424234390259
            },
            "state": "None"
        },
        "ToiletPaper_21afeb3a": {
            "objectId": "ToiletPaper|-02.93|+01.20|+01.46",
            "objectType": "ToiletPaper",
            "position": {
                "x": -2.072418212890625,
                "y": 1.2287287712097168,
                "z": 1.092890739440918
            },
            "isPickedUp": true,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.20000000298023224,
            "center": {
                "x": -2.072418212890625,
                "y": 1.2900768518447876,
                "z": 1.092890739440918
            },
            "state": "None"
        },
        "ToiletPaper_468b6b79": {
            "objectId": "ToiletPaper|-02.54|+01.19|+01.45",
            "objectType": "ToiletPaper",
            "position": {
                "x": -2.541616201400757,
                "y": 1.1936887502670288,
                "z": 1.453466534614563
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.20000000298023224,
            "center": {
                "x": -2.541325092315674,
                "y": 1.2549991607666016,
                "z": 1.4534454345703125
            },
            "state": "None"
        },
        "ToiletPaperHanger_967a779e": {
            "objectId": "ToiletPaperHanger|-02.29|+00.91|+00.00",
            "objectType": "ToiletPaperHanger",
            "position": {
                "x": -2.2880749702453613,
                "y": 0.9106156229972839,
                "z": 0.00031466176733374596
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.2752082347869873,
                "y": 0.8646001815795898,
                "z": 0.050453051924705505
            },
            "state": "None"
        },
        "Towel_7ba609a6": {
            "objectId": "Towel|-00.11|+01.51|+01.94",
            "objectType": "Towel",
            "position": {
                "x": -0.10690004378557205,
                "y": 1.5100001096725464,
                "z": 1.9429999589920044
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.5699999928474426,
            "center": {
                "x": -0.10971584171056747,
                "y": 1.2195018529891968,
                "z": 1.9423396587371826
            },
            "state": "None"
        },
        "TowelHolder_869d5715": {
            "objectId": "TowelHolder|+00.00|+01.50|+01.94",
            "objectType": "TowelHolder",
            "position": {
                "x": 0.0,
                "y": 1.496000051498413,
                "z": 1.9429999589920044
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -0.056185152381658554,
                "y": 1.4960418939590454,
                "z": 1.9428061246871948
            },
            "state": "None"
        },
        "Window_95b9459d": {
            "objectId": "Window|-02.26|+01.66|-00.02",
            "objectType": "Window",
            "position": {
                "x": -2.25600004196167,
                "y": 1.656000018119812,
                "z": -0.02199999988079071
            },
            "isPickedUp": false,
            "isOpen": false,
            "isSliced": false,
            "isToggled": false,
            "isBroken": false,
            "isFilledWithLiquid": false,
            "mass": 0.0,
            "center": {
                "x": -2.24519681930542,
                "y": 1.6559998989105225,
                "z": -0.06176251173019409
            },
            "state": "None"
        }
    },
    "agent_info": {
        "agent_0": {
            "name": "agent",
            "position": {
                "x": -1.0279093980789185,
                "y": 0.9027520418167114,
                "z": 0.32495352625846863
            },
            "rotation": {
                "x": -0.0,
                "y": 53.95988082885742,
                "z": -0.0
            },
            "cameraHorizon": 35.0,
            "isStanding": true,
            "inHighFrictionArea": false
        },
        "agent_1": {
            "name": "agent",
            "position": {
                "x": -1.998284101486206,
                "y": 0.9027520418167114,
                "z": 1.2994985580444336
            },
            "rotation": {
                "x": 0.0,
                "y": 199.73875427246094,
                "z": 0.0
            },
            "cameraHorizon": 35.00000762939453,
            "isStanding": true,
            "inHighFrictionArea": false
        }
    },
    "reachable_positions": [
        [
            -1.0279093980789185,
            0.9027520418167114,
            0.32495352625846863
        ],
        [
            -1.0279093980789185,
            0.9027520418167114,
            0.574953556060791
        ],
        [
            -1.2779093980789185,
            0.9027520418167114,
            0.32495352625846863
        ],
        [
            -0.7779093980789185,
            0.9027520418167114,
            0.574953556060791
        ],
        [
            -1.0279093980789185,
            0.9027520418167114,
            0.824953556060791
        ],
        [
            -1.2779093980789185,
            0.9027520418167114,
            0.574953556060791
        ],
        [
            -1.5279093980789185,
            0.9027520418167114,
            0.32495352625846863
        ],
        [
            -1.2779093980789185,
            0.9027520418167114,
            0.824953556060791
        ],
        [
            -1.5279093980789185,
            0.9027520418167114,
            0.574953556060791
        ],
        [
            -1.7779093980789185,
            0.9027520418167114,
            0.32495352625846863
        ],
        [
            -1.2779093980789185,
            0.9027520418167114,
            1.074953556060791
        ],
        [
            -1.5279093980789185,
            0.9027520418167114,
            0.824953556060791
        ],
        [
            -1.7779093980789185,
            0.9027520418167114,
            0.574953556060791
        ],
        [
            -1.2779093980789185,
            0.9027520418167114,
            1.324953556060791
        ],
        [
            -1.5279093980789185,
            0.9027520418167114,
            1.074953556060791
        ],
        [
            -1.7779093980789185,
            0.9027520418167114,
            0.824953556060791
        ],
        [
            -1.2779093980789185,
            0.9027520418167114,
            1.574953556060791
        ],
        [
            -1.5279093980789185,
            0.9027520418167114,
            1.324953556060791
        ],
        [
            -1.7779093980789185,
            0.9027520418167114,
            1.074953556060791
        ],
        [
            -1.2779093980789185,
            0.9027520418167114,
            1.824953556060791
        ],
        [
            -1.5279093980789185,
            0.9027520418167114,
            1.574953556060791
        ],
        [
            -1.7779093980789185,
            0.9027520418167114,
            1.324953556060791
        ],
        [
            -1.2779093980789185,
            0.9027520418167114,
            2.074953556060791
        ],
        [
            -1.5279093980789185,
            0.9027520418167114,
            1.824953556060791
        ],
        [
            -1.7779093980789185,
            0.9027520418167114,
            1.574953556060791
        ],
        [
            -2.027909278869629,
            0.9027520418167114,
            1.324953556060791
        ],
        [
            -1.2779093980789185,
            0.9027520418167114,
            2.324953556060791
        ],
        [
            -1.5279093980789185,
            0.9027520418167114,
            2.074953556060791
        ],
        [
            -1.7779093980789185,
            0.9027520418167114,
            1.824953556060791
        ],
        [
            -2.027909278869629,
            0.9027520418167114,
            1.574953556060791
        ],
        [
            -1.0279093980789185,
            0.9027520418167114,
            2.324953556060791
        ],
        [
            -1.2779093980789185,
            0.9027520418167114,
            2.574953556060791
        ],
        [
            -1.5279093980789185,
            0.9027520418167114,
            2.324953556060791
        ],
        [
            -1.7779093980789185,
            0.9027520418167114,
            2.074953556060791
        ],
        [
            -2.027909278869629,
            0.9027520418167114,
            1.824953556060791
        ],
        [
            -1.0279093980789185,
            0.9027520418167114,
            2.574953556060791
        ],
        [
            -1.2779093980789185,
            0.9027520418167114,
            2.824953556060791
        ],
        [
            -1.5279093980789185,
            0.9027520418167114,
            2.574953556060791
        ],
        [
            -1.7779093980789185,
            0.9027520418167114,
            2.324953556060791
        ],
        [
            -2.027909278869629,
            0.9027520418167114,
            2.074953556060791
        ],
        [
            -1.0279093980789185,
            0.9027520418167114,
            2.824953556060791
        ],
        [
            -1.2779093980789185,
            0.9027520418167114,
            3.074953556060791
        ],
        [
            -1.5279093980789185,
            0.9027520418167114,
            2.824953556060791
        ],
        [
            -1.7779093980789185,
            0.9027520418167114,
            2.574953556060791
        ],
        [
            -2.027909278869629,
            0.9027520418167114,
            2.324953556060791
        ],
        [
            -0.7779093980789185,
            0.9027520418167114,
            2.824953556060791
        ],
        [
            -1.0279093980789185,
            0.9027520418167114,
            3.074953556060791
        ],
        [
            -1.2779093980789185,
            0.9027520418167114,
            3.324953556060791
        ],
        [
            -1.5279093980789185,
            0.9027520418167114,
            3.074953556060791
        ],
        [
            -1.7779093980789185,
            0.9027520418167114,
            2.824953556060791
        ],
        [
            -2.027909278869629,
            0.9027520418167114,
            2.574953556060791
        ],
        [
            -0.5279093980789185,
            0.9027520418167114,
            2.824953556060791
        ],
        [
            -0.7779093980789185,
            0.9027520418167114,
            3.074953556060791
        ],
        [
            -1.0279093980789185,
            0.9027520418167114,
            3.324953556060791
        ],
        [
            -1.5279093980789185,
            0.9027520418167114,
            3.324953556060791
        ],
        [
            -1.7779093980789185,
            0.9027520418167114,
            3.074953556060791
        ],
        [
            -2.027909278869629,
            0.9027520418167114,
            2.824953556060791
        ],
        [
            -0.27790939807891846,
            0.9027520418167114,
            2.824953556060791
        ],
        [
            -0.5279093980789185,
            0.9027520418167114,
            3.074953556060791
        ],
        [
            -0.7779093980789185,
            0.9027520418167114,
            3.324953556060791
        ],
        [
            -1.7779093980789185,
            0.9027520418167114,
            3.324953556060791
        ],
        [
            -2.027909278869629,
            0.9027520418167114,
            3.074953556060791
        ],
        [
            -0.27790939807891846,
            0.9027520418167114,
            3.074953556060791
        ],
        [
            -0.5279093980789185,
            0.9027520418167114,
            3.324953556060791
        ],
        [
            -2.027909278869629,
            0.9027520418167114,
            3.324953556060791
        ],
        [
            -0.27790939807891846,
            0.9027520418167114,
            3.324953556060791
        ]
    ],
    "obj_changed": [
        [],
        [
            {
                "objectId": "ToiletPaper|-02.93|+01.20|+01.46",
                "objectType": "ToiletPaper",
                "position": {
                    "x": -2.072418212890625,
                    "y": 1.2287287712097168,
                    "z": 1.092890739440918
                },
                "isPickedUp": true,
                "isOpen": false,
                "isSliced": false,
                "isToggled": false,
                "isBroken": false,
                "isFilledWithLiquid": false,
                "mass": 0.20000000298023224,
                "center": {
                    "x": -2.072418212890625,
                    "y": 1.2900768518447876,
                    "z": 1.092890739440918
                },
                "state": "None"
            }
        ]
    ]
}


- ai2thor_actions
["GoToObject <robot><object>", "OpenObject <robot><object>", "CloseObject <robot><object>", 
                   "BreakObject <robot><object>", "SliceObject <robot><object>", "SwitchOn <robot><object>", 
                   "SwitchOff <robot><object>", "CleanObject <robot><object>", "PickupObject <robot><object>", 
                   "PutObject <robot><object><receptacleObject>", "DropHandObject <robot><object>", 
                   "ThrowObject <robot><object>", "PushObject <robot><object>", "PullObject <robot><object>"]

You should reason over the information above, and regenerate a new executable plan to complete the final task.
Before generating a new plan, write the previous failure reason in comment.
Your output should be two part of code, one is the initialization part, and another is code plan part. 
In ```previous plan``` given above, there are two sections and these are the two sections will later be replaced by your output: one starts with start with ### Code Plan Start and end with ### Code Plan End, this the section that how robot should take actions;
another starts with ### Initialization Start and ends with ### Initialization End, this is the section of initialzation the environment(use Teleport to setup agents' position and pickup the specific object using objectID). 
The code plan part do not need to redo the previously success subtask. The previously success subtask should be done in the Initialization stage.
The two parts you generated should be able to fit into the rest of the code.
Make sure the output file can successfully execute and stimulate the robot's actions and complete the final task. You should initialize the position of agents based on the ```env_state```.
The code plan part no need to verify current state, just think of this is the next step from ```previous plan```.

* NOTE: DO NOT OUTPUT ANYTHING EXTRA OTHER THAN WHAT HAS BEEN SPECIFIED
 Let's work this out in a step by step way to be sure we have the right answer.

